import React, { Component } from 'react';
import Header from '../Header/Header'
import Search from '../Search/Search'
import HttpRequests from './HttpRequests'
import BookGrid from '../BookGrid/BookGrid'
import Loader from '../Loader/Loader'
import ErrorBoundary from '../ErrorBoundary/ErrorBoundary'

// function to map the fetched results into required categories.
// setting default values in case no author/title available
const bookInfoSort = vol => {
  if (vol.volumeInfo){
    console.log(vol.volumeInfo)
  }
  return {
    title: vol.volumeInfo.title || 'No Title',
    author: vol.volumeInfo.authors || 'Unknown Author',
    publisher: vol.volumeInfo.publisher || '',
    description: vol.volumeInfo.description || 'No Description Available For This Book',
    url: vol.volumeInfo.previewLink,
    img: (vol.volumeInfo.imageLinks && (vol.volumeInfo.imageLinks.thumbnail || vol.volumeInfo.imageLinks[0]) ) || ''
  }
}

class App extends Component {

  state = {
    pastQueries: [],
    searchQuery: null,
    loadedBooks: null,
    bookShelf: null,
    error: null,
    loading: false,
  }

  componentDidMount() {
    let shelfData = localStorage.getItem('shelf')
    let books = localStorage.getItem('books')
    let queries = localStorage.getItem('queries')

    this.setState({
      bookShelf: shelfData || null,
      pastQueries: queries || [],
      loadedBooks: books || null
    })
  }

  bookmarkHandler = (book) => {
    let { bookShelf } = this.state
    // if the book exists in the bookshelf(bug: identical titles..) don't add it.
    if ( bookShelf.includes(s => s.title === book.title) ) return null
    bookShelf = bookShelf.concat(book)
    localStorage.setItem('shelf', [...bookShelf])
  }

  handleSearchQuery = async query => {
    let { pastQueries } = this.state
    pastQueries = pastQueries.concat(query)

    // the fastest solution, would like to change it later to suit functional style.
    pastQueries.length >= 10 && pastQueries.shift()
    localStorage.setItem('queries', [...pastQueries])
    this.setState({loading: true, pastQueries})

    const results = await HttpRequests.getBooks(query)
    !results.length && this.setState({error: 'Did not find any books. no results'})
    
    // not sure why I wrote this line. why would I add the fetched books to the bookshelf state.
    // this.setState({ bookShelf: results})
    if (results.length) {
      const loadedBooks = results.map(bookInfoSort)
      this.setState({loadedBooks, loading: false })
      localStorage.setItem('books', [...loadedBooks])
    }
  }

  render() {
    const title = 'Hook A Book'
    const { loadedBooks, error, loading } = this.state
    const showBookGrid = loadedBooks 
      ? (
        <ErrorBoundary>
          <BookGrid books={loadedBooks } bookmarkHandler={this.bookmarkHandler} /> 
        </ErrorBoundary>
      )
      : loading ? <Loader /> : null

    const errors = error
      ? <h4 style={{textAlign: 'center', marginTop: '15px'}}>{error}</h4>
      : null



    return (
      <div className="app">
        <Header title={title} />
        <ErrorBoundary>
          <Search getQueryRequest={this.handleSearchQuery}/>
        </ErrorBoundary>
        {errors}
        {showBookGrid}
      </div>
    )
  }
}

export default App
